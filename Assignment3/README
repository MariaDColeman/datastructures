Maria Coleman
JHED: mcolem31
email: mcolem31@jhu.edu





Problem 2: All Sorts of Sorts

There is an issue!! PolySort uses Strings instead of integers. So
this was causing very unexpected results because for example,
"109, 1154, 131" is considered sorted as a string, but that's not
what is intended. Therefore, I modified PolySort.java so that
each line of the data file was read in and parsed to an Integer,
and every array was an array of type <Integer> rather than
<String>.



Here are some of the experiments I ran, with numbers so I can refer
to them in my discussion:

Experiment 1:
$ java PolySort 10000 <random.data
     which resulted in the following:
 BubbleSort:    Reads=150,439,515  Writes=50,449,514  Seconds=0.316132
 SelectionSort: Reads=150,114,103  Writes=19,998      Seconds=0.152967
 InsertionSort: Reads=100,929,002  Writes=50,449,514  Seconds=0.144193

Experiment 2:
$ java PolySort 10000 <descending.data
     which resulting in the following:
 BubbleSort:    Reads=199,980,001  Writes=99,990,000  Seconds=0.224568
 SelectionSort: Reads=175,034,996  Writes=19,998      Seconds=0.169546
 InsertionSort: Reads=199,990,000  Writes=99,990,000  Seconds=0.260632

Experiment 3:
$ java PolySort 10000 <ascending.data
     which resulted in the following:
 BubbleSort:    Reads=99,990,001   Writes=0       Seconds=0.116575
 SelectionSort: Reads=150,034,996  Writes=19,998  Seconds=0.083173
 InsertionSort: Reads=29,998       Writes=0       Seconds=0.001441


I then ran the same experiments but only with the first 100 values

Experiment 4:
$ java PolySort 100 <random.data
     which resulted in the following:
 BubbleSort:    Reads=15,007  Writes=5,106  Seconds=0.002043
 SelectionSort: Reads=15,679  Writes=198    Seconds=0.000824
 InsertionSort: Reads=10,498  Writes=5,106  Seconds=0.000503

Experiment 5:
$ java PolySort 100 <descending.data
     which resulting in the following:
 BubbleSort:    Reads=19,801  Writes=9,900  Seconds=0.000725
 SelectionSort: Reads=17,846  Writes=198    Seconds=0.000578
 InsertionSort: Reads=19,900  Writes=9,900  Seconds=0.000789

Experiment 6:
$ java PolySort 100 <ascending.data
     which resulted in the following:
 BubbleSort:    Reads=9,901   Writes=0    Seconds=0.001102
 SelectionSort: Reads=15,346  Writes=198  Seconds=0.001261
 InsertionSort: Reads=298     Writes=0    Seconds=0.000029

This is on descending.data but with length of 200.

Experiment 7:
$ java PolySort 200 <descending.data
     which resulted in the following:
 BubbleSort:    Reads=79,601  Writes=39,800    Seconds=0.004376
 SelectionSort: Reads=70,696  Writes=398       Seconds=0.002041
 InsertionSort: Reads=79,800  Writes=39,800    Seconds=0.002691



Given that the 3 algorithms are all quadratic in terms of their
asymptotic performance, the actual running time "sort of" corresponds
to the asymptotic complexity as I would expect. The difference in
time (seconds) varies a lot depending on the length of the array.
For example, for descending.data for bubble sort, from a length of
100 to 200 (experiments 5 and 7), the length doubled and the time
increased by 6.04 times (0.004376/0.000725), while expected was
4 times. Whereas for the same descending.data and for bubble sort
again, from a length of 100 to 10000 (experiments 5 and 2), 
the length increased 100 times but the time only increased by 308 times
(0.224568/0.000725), while expected was 100^2 times. I believe this
has something to do with the JVM making it more efficient
since the length is so large so the time it takes on my machine
is not that reliable.


Between Experiments 1 and 4, both using random.data, the size of the
array increased by 100 times (from 100 in Experiment 4 to 10000 in
Experiment 1), and the time increased by 154 times
for BubbleSort, by 186 times for SelectionSort, and by 287 times for
InsertionSort. Again, for all of these, the expected is 100^2 times
since they are all O(N^2) but the JVM probably affects this.


It is interesting to note that for all 7 experiments, the number of
writes for bubblesort and insertionsort is the same. This means the
number of assignments are the same, and this is consistently
higher than the number of writes that selection sort does.


As shown in Experiments 3 and 6, when the data is in ascending order,
InsertionSort is significantly faster than BubbleSort and 
SelectionSort. In this ascending order case/Experiments 3 and 6, the key,
most noticable, difference is that the number of reads for
InsertionSort is significantly less than for Bubble and Selection.


When the data is sorted in descending order (Experiments 2 and 5),
BubbleSort and InsertionSort write many many more times than
SelectionSort does, yet the overall reads and time are all similar but
slightly less for SelectionSort.


If you have presorted data (like ascending.data),
and even partially presorted data,
then insertion sort is much better than selectionsort and bubblesort.

Bubble sort tends to make a lot more assignments than selection sort.

As shown, practically, there are differences between the 3 quadratic
algorithms. Alhough they are grouped as O(n^2), each algorithm
varies based on its implementation and often has resulting n terms
and constants which are not seen when you group based on the highest
power (n^2).





Problem 3: Analysis of Bubble Sort

The length of the array to be sorted is the size of the problem
in the worst case and is referred to as n.

For this analysis, we can ignore lines 1,6,7,8,9 since no assignment
or comparison happens in these lines.

Notation:
    Ai(n) = number of assignments in line i
    Ci(n) = number of comparisons in line i
    Ti(n) = the number of times a loop starting in line i will run

Starting with line 2...
There is initially 1 assignment (int i = A.length-1) and then i is
assignment a new value (i--) the number of times that the loop runs.
This amount is dictated by the comparison i > 0. In the worst case,
the comparison happens n times and the loop runs (n-1) times, so
(i--) happens (n-1) times. Therefore, for line 2:
        T2(n) = n-1
    A2(n) = 1 + (n-1)
        A2(n) = n
        C2(n) = n

Now for line 3...
There is initially 1 assignment (j=0) for T2(n) times and then j is
assigned a new value (j++) the number of times that the inner loop runs,
which is equal to T3(n)
This amount is dictated by the comparison j < i. Since j starts at 0
and goes till i, and since i goes from n-1 to 0, the loop in line 3
will run (n-1) times for i=n-1, all the way down to 2 times for i=2
and 1 time for i=1. In total:
    T3(n) = (n-1) + (n-2) + ... + 2 + 1
which is equal to (1/2)(n)(n-1) or
    T3(n) = (1/2)n^2 - (1/2)n

The comparison happens the number of times the loop runs (T3(n)) plus 1
times T2(n) (because the last comparison says the loop can't run)

Therefore, for line 3:
        T3(n) = (1/2)n^2 - (1/2)n
    A3(n) = T2(n) + T3(n)
          = (n-1) + (1/2)n^2 - (1/2)n
        A3(n) = (1/2)n^2 + (1/2)n - 1
    C3(n) = T3(n) + T2(n)
        C3(n) = (1/2)n^2 - (1/2)n + n - 1

Now for line 4...
Line 4 only has a comparison in it. This comparison happens the number
of times the for loop in line 3 happens, T3(n) which was determined
to be (1/2)n^2 - (1/2)n.
Therefore, for line 4:
        A4(n) = 0
        C4(n) = (1/2)n^2 - (1/2)n

Now for line 5...
Line 5 consists of 3 separate assignments, and no comparisons. The number
of times the assignments in line 5 happens is equal to the number of times
the comparison in line 4 results in true. In the worst case, like if the
array was already sorted in descending order, line 4 would result in true
every time. Therefore, the 3 assignments in line 5 each happen the same
number of times as the comparison in line 4 happens, C4(n).
Therefore, for line 5:
    A5(n) = 3 * ((1/2)n^2 - (1/2)n)
        A5(n) = (3/2)n^2 - (3/2)n
        C5(n) = 0

I can now total up the assignments and comparisons per line to get the
overall values for the given implementation of bubble sort in the worst
case.
    A(n) = A2(n) +        A3(n)         + A4(n) +       A5(n)
    A(n) =   n   + (1/2)n^2 + (1/2)n -1 +   0   + (3/2)n^2 - (3/2)n

    A(n) =  2n^2 - 1 

    C(n) = C2(n) +        C3(n)               +        C4(n)      + C5(n)
    C(n) =   n   + (1/2)n^2 - (1/2)n + n - 1  + (1/2)n^2 - (1/2)n +  0

    C(n) = n^2 + n - 1

************************
    A(n) = 2n^2 - 1
    C(n) = n^2 + n - 1
************************
