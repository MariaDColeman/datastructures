Maria Coleman
mcolem31@jhu.edu


I will include the Any adt since that will be used in the below
specifications:

adt Any
    uses Boolean
    defines Any
    operations
        equals: Any x Any ---> Boolean
    axioms
        equals(a, a)
        equals(a, b) = equals(b, a)
        equals(a, b) and equals(b, c) = equals(a, c)



Problem 1: Uninitialized Arrays

adt UglyArray
    uses Any, Integer, Boolean
    defines UglyArray<T: Any>
    operations
        new: Integer -/-> Array<T>
        get: Array<T> x Integer -/-> T
        put: Array<T> x Integer x T -/-> Array<T>
        length: Array<T> ---> Integer
        empty: Array<T> x Integer -/-> Boolean
    preconditions
        new(n): 0 < n
        get(a, i): (0 <= i < length(a)) and (not empty(a, i))
        put(a, i, t): 0 <= i < length(a)
        empty(a, i): 0 <= i < length(a)
    axioms
        empty(new(n), i)
        get(put(a, i, t), j) = (if i = j then t else get(a, j))
        length(new(n)) = n
        length(put(a, i, t)) = length(a)
        not empty(put(a, i, t), i)


The major difference between Array and UglyArray is that UglyArray
does not have an "initial value" that gets put into every slot of
the array, but Array does. 
I added an operation called empty that returns whether a slot in a
particular array in empty or not, and initially, all slots are 
considered empty since it is an uninitialized array.
I adjusted the precondition for get so that get can only be called
if the slot of the array at the provided index is not empty.

The first axiom I added requires that all slots in a new array are
empty. The last axiom I added says that if you do a put operation
at a certain index i, then that slot at index i is not empty.

I would rather have Array in a programming language over UglyArray
mainly for simplicity. I had to add a new operation for UglyArray.
I can always initialize the array to something depending on my
specific program. However, if you cannot choose what the initial
value should be, I suppose the UglyArray would be better.




Problem 2: Flexible Arrays

adt FlexibleArray
    uses Any, Integer
    defines FlexibleArray<T: Any>
    operations
        new: Integer x Integer x T -/-> Array<T>
        get: Array<T> x Integer -/-> T
        put: Array<T> x Integer x T -/-> Array<T>
        lowerBound: Array<T> ---> Integer
        upperBound: Array<T> ---> Integer
    preconditions
        new(b, f, t): b <= f
        get(a, i): lowerBound(a) <= i <= upperBound(a)
        put(a, i, t): lowerBound(a) <= i <= upperBound(a)
    axioms
        get(new(b, f, t), i) = t
        get(put(a, i, t), j) = (if i = j then t else get(a, j))
        lowerBound(new(b, f, t)) = b
        upperBound(new(b, f, t)) = f
        lowerBound(put(a, i, t)) = lowerBound(a)
        upperBound(put(a, i, t)) = upperBound(a)


FlexibleArray is like Array in that it is bounded and initialized, but
both its lower and its upper index bounds are set when an array instance
is created. The lower and upper bounds can be any integer, as long as
the lower bound is less than or equal to the upper bound, and both bounds
are inclusive.

I did not keep the length operation from the Array ADT because that is used
primarily for iterating through the array, since is it zero-based. For
FlexibleArray, we already know the lower and upper bounds so for iterating
through the array, one can start at the lower bound and increase the index
until the upper bound (plus 1) is reached, as one would start at zero and 
increase the index until the value of length is reached. Furthermore, if
determining the length is ever necessary, it can be calculated by 
subtracting the lower bound from the upper bound and adding 1. 

I therefore added the lowerBound and upperBound operations, which return
the values for the lower bound and upper bound, respectively, for an array.

Because I was first taught and only have experience with zero-based arrays,
I would prefer Array over FlexibleArray in my programming language just
because it is what I am familiar with. However, it would not be too large
of an inconvinience to have to work with FlexibleArrays instead. Another
argument for Array over FlexibleArray is that Array only has 3 operations
while FlexibleArray has 4, which makes Array more simple.


Problem 3

The warning that comes up when compiling is the only warning that is allowed.

I am choosing to answer the "hint" about what to do if a slot is changed
and then changed back to the initial value by removing the node if it is
changed back to the initial value so that there are only nodes for values
that are truly different than the initial value. If this is incorrect, then
the really simple fix is to please comment out the portion of the put
operation in SparseArray where I call remove. The if statement saying
if t.data == this.initial and everything inside it should be commented out
if I should not be removing them.

One way to improve the program would be to make the list sorted, rather
than simply prepending nodes.
